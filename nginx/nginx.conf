user nobody;
worker_processes 1;
load_module /usr/lib/nginx/modules/ngx_rtmp_module.so;
rtmp_auto_push on;
events {}
pcre_jit on;

http {
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            root /etc/nginx/;
        }
			}

    }

rtmp {

     server {
        listen 1935;
            chunk_size 4000;

        application transcode {
            live on;
            record off;
            exec_push ffmpeg -re -i "rtmp://localhost:1935/transcode/$name live=1"
            -vcodec libx264 
            -preset medium 
            -x264opts nal-hrd=cbr:force-cfr=1:keyint=120 
            -r 60 
            -b:v 3500k 
            -maxrate 3500k 
            -bufsize 3500k 
            -threads 8 
            -s hd720 
            -pix_fmt yuv420p 
            -sws_flags lanczos 
            -acodec copy 
            -f flv "rtmp://localhost:1935/live/$name" 
            2>>/etc/nginx/ffmpeg-$name.log;
        }
        application live {
             live on;
             record off;
             push_reconnect 500ms;
             #push rtmp://live-arn.twitch.tv/app/[streamkey];
        }
        application delay {
            live on;
            record all;
            record_path /tmp/nginx;

            # Work with timestamp to know when to continue streaming
            record_suffix .flv;
            record_unique on;

            # Work with signals to know when to continue streaming
            #record_append on;
            
            exec_publish python /opt/nginx/rtmp_stream_delayer.py;
        }

        exec_static mkdir /tmp/nginx;   #Working dir. Must be consistend with the delayer.py
        
      }
